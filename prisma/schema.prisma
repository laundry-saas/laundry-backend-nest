// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum BillingCycle {
  MONTHLY
  ANNUALLY
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
}

enum TransactionStatus {
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  GENERAL
  VENDOR
  CUSTOMER
  ADMIN
}

enum PaymentMode {
  CASH
  CARD
}

model Location {
  id      String @id @default(uuid())
  country String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model User {
  id            String         @id @default(uuid())
  phone         String
  email         String
  password      String
  role          UserRole
  customer      Customer?
  vendor        Vendor?
  admin         Admin?
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("users")
}

model Admin {
  id          String   @id @default(uuid())
  permissions String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("admins")
}

model Vendor {
  id          String @id @default(uuid())
  name        String
  country     String
  contactInfo Json?

  subscription Subscription?
  customers    Customer[]

  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Payment   Payment[]
  orders    Order[]
  priceList PriceList[]

  @@map("vendors")
}

model Customer {
  id    String @id @default(uuid())
  name  String
  email String @unique
  phone String @unique

  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  vendorId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reviews   Review[]
  orders    Order[]

  @@map("customers")
}

model PriceList {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String?
  imageUrl    String?
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("price_list")
}

model Order {
  id              String      @id @default(uuid())
  items           Json[]
  fullName        String
  email           String
  phone           String
  customer        Customer?   @relation(fields: [customerId], references: [id])
  customerId      String?
  vendor          Vendor      @relation(fields: [vendorId], references: [id])
  vendorId        String
  totalAmount     Float
  note            String?
  pickUpAddress   String
  pickUpDateTime  DateTime
  dropOffDateTime DateTime
  isExpress       Boolean     @default(false)
  paymentMode     PaymentMode @default(CASH)
  status          OrderStatus
  reviews         Review[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@map("orders")
}

model Review {
  id         String   @id @default(uuid())
  comment    String
  rating     Int
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("reviews")
}

model Notification {
  id        String           @id @default(uuid())
  title     String
  message   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  meta      Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("notifications")
}

model Subscription {
  id              String             @id @default(uuid())
  plan            Plan               @relation(fields: [planId], references: [id])
  planId          String
  vendor          Vendor             @relation(fields: [vendorId], references: [id])
  vendorId        String             @unique
  startDate       DateTime
  endDate         DateTime
  recurringAmount Float
  billingCycle    BillingCycle       @default(MONTHLY)
  status          SubscriptionStatus @default(PENDING)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("subscriptions")
}

model CustomerTransaction {
  id String @id @default(uuid())

  customerId String
  amount     Float

  status TransactionStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customer_transactions")
}

model Payment {
  id       String @id @default(uuid())
  amount   Float
  plan     Plan   @relation(fields: [planId], references: [id])
  planId   String
  vendor   Vendor @relation(fields: [vendorId], references: [id])
  vendorId String

  @@map("vendor_payments")
}

model Plan {
  id           String         @id @default(uuid())
  name         String
  config       Json
  subscription Subscription[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  payments     Payment[]

  @@map("plans")
}
